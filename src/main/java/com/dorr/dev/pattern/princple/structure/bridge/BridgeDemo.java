package com.dorr.dev.pattern.princple.structure.bridge;

public class BridgeDemo {
    /**
     *
     * @param args
     *
     * 桥梁模式将抽象和实现解耦
     *
     * ■ 如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的联系。
     * ■ 设计要求实现化角色的任何改变不应当影响客户端，或者说实现化角色的改变对客户端是完全透明的。
     * ■ 一个构件有多于一个的抽象化角色和实现化角色，系统需要它们之间进行动态耦合。
     * ■ 不希望或不适合使用继承的场合。继承具有强入侵性质，即父类有的方法，子类必须有；而桥梁模式是弱关联关系。
     *   因此对于比较明确不发生变化的，则可以通过继承完成；若不能确定是否会发生变化，则通过桥梁模式来解决。
     *   注意使用桥梁模式时主要考虑如何拆分抽象和实现，桥梁模式的意图还是对变化的封装，尽量把可能变化的因素封装到最细、最小的逻辑单元中，避免风险扩散。
     *
     * 例子是： 用不同的颜色画不同的图形
     *
     */

    public static void main(String[] args) {

        new Circle(()->"红色").draw();

        new Retangle(()->"紫色").draw();

    }
}
